<?xml version="1.0"?>
<!--
 (c) 2019 Copyright, Real-Time Innovations, Inc.  All rights reserved.

  RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form
 only for use with RTI products.  The Software is provided "as is", with no
 warranty of any type, including any warranty for fitness for any purpose.
 RTI is under no obligation to maintain or support the Software.  RTI shall
 not be liable for any incidental or consequential damages arising out of the
 use or inability to use the software.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.0/rti_dds_qos_profiles.xsd"
     version="6.0.0">

    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="CameraImage_Library">

        <!-- Base for profiles that need asynchronous publisher (flat_types
             and plain_types) -->
        <qos_profile name="FlatData"
                     base_name="BuiltinQosLibExp::Generic.StrictReliable.LargeData" is_default_qos="true">
            <datawriter_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>

                <!-- Use XCDR2 format always, even for plain DataWriters so
                     that they can communicate with flat-data DataReaders, which
                     only support XCDR2 -->
                <representation>
                    <value><element>XCDR2_DATA_REPRESENTATION</element></value>
                </representation>
            </datawriter_qos>
            <datareader_qos>
                <!-- Use XCDR2 format always, even for plain DataReaders so
                     that they can communicate with flat-data DataWriters, which
                     only support XCDR2 -->
                <representation>
                    <value><element>XCDR2_DATA_REPRESENTATION</element></value>
                </representation>
            </datareader_qos>
            <participant_qos>
                <property>
                    <value>
                        <element>
                            <name>dds.transport.shmem.builtin.received_message_count_max</name>
                            <value>1000</value>
                        </element>
                        <element>
                            <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                            <value>60000000</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                            <value>1000000</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                            <value>2000000</value>
                        </element>
                    </value>
                </property>
            </participant_qos>
        </qos_profile>
    </qos_library>
</dds>
